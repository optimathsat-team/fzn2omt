#line 2 "parser/flatzincflexlexer.cc"
#include "../msatconfig.h"
#include <stdint.h>
#ifdef MSAT_MSVC
extern "C" int isatty(int);
#  define YY_NO_UNISTD_H 1
#endif

#line 10 "parser/flatzincflexlexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define msat_flatzinc_parser__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer msat_flatzinc_parser__create_buffer
#endif

#ifdef yy_delete_buffer
#define msat_flatzinc_parser__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer msat_flatzinc_parser__delete_buffer
#endif

#ifdef yy_scan_buffer
#define msat_flatzinc_parser__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer msat_flatzinc_parser__scan_buffer
#endif

#ifdef yy_scan_string
#define msat_flatzinc_parser__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string msat_flatzinc_parser__scan_string
#endif

#ifdef yy_scan_bytes
#define msat_flatzinc_parser__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes msat_flatzinc_parser__scan_bytes
#endif

#ifdef yy_init_buffer
#define msat_flatzinc_parser__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer msat_flatzinc_parser__init_buffer
#endif

#ifdef yy_flush_buffer
#define msat_flatzinc_parser__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer msat_flatzinc_parser__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define msat_flatzinc_parser__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state msat_flatzinc_parser__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define msat_flatzinc_parser__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer msat_flatzinc_parser__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define msat_flatzinc_parser_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state msat_flatzinc_parser_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define msat_flatzinc_parser_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state msat_flatzinc_parser_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define msat_flatzinc_parser_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack msat_flatzinc_parser_ensure_buffer_stack
#endif

#ifdef yylex
#define msat_flatzinc_parser_lex_ALREADY_DEFINED
#else
#define yylex msat_flatzinc_parser_lex
#endif

#ifdef yyrestart
#define msat_flatzinc_parser_restart_ALREADY_DEFINED
#else
#define yyrestart msat_flatzinc_parser_restart
#endif

#ifdef yylex_init
#define msat_flatzinc_parser_lex_init_ALREADY_DEFINED
#else
#define yylex_init msat_flatzinc_parser_lex_init
#endif

#ifdef yylex_init_extra
#define msat_flatzinc_parser_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra msat_flatzinc_parser_lex_init_extra
#endif

#ifdef yylex_destroy
#define msat_flatzinc_parser_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy msat_flatzinc_parser_lex_destroy
#endif

#ifdef yyget_debug
#define msat_flatzinc_parser_get_debug_ALREADY_DEFINED
#else
#define yyget_debug msat_flatzinc_parser_get_debug
#endif

#ifdef yyset_debug
#define msat_flatzinc_parser_set_debug_ALREADY_DEFINED
#else
#define yyset_debug msat_flatzinc_parser_set_debug
#endif

#ifdef yyget_extra
#define msat_flatzinc_parser_get_extra_ALREADY_DEFINED
#else
#define yyget_extra msat_flatzinc_parser_get_extra
#endif

#ifdef yyset_extra
#define msat_flatzinc_parser_set_extra_ALREADY_DEFINED
#else
#define yyset_extra msat_flatzinc_parser_set_extra
#endif

#ifdef yyget_in
#define msat_flatzinc_parser_get_in_ALREADY_DEFINED
#else
#define yyget_in msat_flatzinc_parser_get_in
#endif

#ifdef yyset_in
#define msat_flatzinc_parser_set_in_ALREADY_DEFINED
#else
#define yyset_in msat_flatzinc_parser_set_in
#endif

#ifdef yyget_out
#define msat_flatzinc_parser_get_out_ALREADY_DEFINED
#else
#define yyget_out msat_flatzinc_parser_get_out
#endif

#ifdef yyset_out
#define msat_flatzinc_parser_set_out_ALREADY_DEFINED
#else
#define yyset_out msat_flatzinc_parser_set_out
#endif

#ifdef yyget_leng
#define msat_flatzinc_parser_get_leng_ALREADY_DEFINED
#else
#define yyget_leng msat_flatzinc_parser_get_leng
#endif

#ifdef yyget_text
#define msat_flatzinc_parser_get_text_ALREADY_DEFINED
#else
#define yyget_text msat_flatzinc_parser_get_text
#endif

#ifdef yyget_lineno
#define msat_flatzinc_parser_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno msat_flatzinc_parser_get_lineno
#endif

#ifdef yyset_lineno
#define msat_flatzinc_parser_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno msat_flatzinc_parser_set_lineno
#endif

#ifdef yyget_column
#define msat_flatzinc_parser_get_column_ALREADY_DEFINED
#else
#define yyget_column msat_flatzinc_parser_get_column
#endif

#ifdef yyset_column
#define msat_flatzinc_parser_set_column_ALREADY_DEFINED
#else
#define yyset_column msat_flatzinc_parser_set_column
#endif

#ifdef yywrap
#define msat_flatzinc_parser_wrap_ALREADY_DEFINED
#else
#define yywrap msat_flatzinc_parser_wrap
#endif

#ifdef yyget_lval
#define msat_flatzinc_parser_get_lval_ALREADY_DEFINED
#else
#define yyget_lval msat_flatzinc_parser_get_lval
#endif

#ifdef yyset_lval
#define msat_flatzinc_parser_set_lval_ALREADY_DEFINED
#else
#define yyset_lval msat_flatzinc_parser_set_lval
#endif

#ifdef yyget_lloc
#define msat_flatzinc_parser_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc msat_flatzinc_parser_get_lloc
#endif

#ifdef yyset_lloc
#define msat_flatzinc_parser_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc msat_flatzinc_parser_set_lloc
#endif

#ifdef yyalloc
#define msat_flatzinc_parser_alloc_ALREADY_DEFINED
#else
#define yyalloc msat_flatzinc_parser_alloc
#endif

#ifdef yyrealloc
#define msat_flatzinc_parser_realloc_ALREADY_DEFINED
#else
#define yyrealloc msat_flatzinc_parser_realloc
#endif

#ifdef yyfree
#define msat_flatzinc_parser_free_ALREADY_DEFINED
#else
#define yyfree msat_flatzinc_parser_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define msat_flatzinc_parser_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 207
#define YY_END_OF_BUFFER 208
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1154] =
    {   0,
        0,    0,  208,  206,    3,    1,    2,  206,    4,  206,
      206,  204,  204,  206,  201,  206,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,    0,  203,    4,
      204,  204,  199,    0,    0,    0,    0,  200,  201,  202,
        0,  201,  201,  201,  201,  201,  201,  201,  201,   12,
      201,  201,  201,  201,  201,  201,  201,  201,  205,    0,
      205,  204,  204,  202,  201,  201,  201,  201,  201,    9,
      201,  201,  201,  201,  201,  201,   11,  201,  201,    6,
        0,  201,    7,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,   13,    0,  205,   10,

      201,  201,  201,   14,    8,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,   16,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,   83,   85,  201,   93,  201,  201,  201,
       98,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  105,  107,  110,  111,  112,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,   34,   36,  201,
       40,  201,   43,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,   81,   82,  201,  201,

      201,  201,   95,   96,   97,  201,  201,  201,  201,  201,
      201,  201,  201,   19,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,   31,   32,
      201,  201,  201,  201,  201,   42,   44,  201,  201,  201,
      201,  201,  201,  201,   61,  201,   63,  201,   53,  201,
       73,  201,  201,   77,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  100,  201,   18,   17,  201,
      201,  201,  201,  103,  104,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,   45,  201,  201,  201,   50,   46,  201,

       52,  201,  201,  201,  201,   75,   76,  201,  201,   57,
      201,   59,  201,  102,  201,  201,  201,  201,  201,  201,
      201,  101,  201,  201,  201,    5,  201,  201,  201,  201,
      201,  201,  117,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,   15,   47,   48,   49,   51,  201,
      201,  201,  201,   55,  201,  201,   79,   58,   56,   60,
      201,  201,  201,   87,   89,   91,  201,  201,  201,  201,
      197,  201,  201,  201,  201,  114,  201,  201,  201,  201,
      201,  201,  201,  201,  201,   33,  201,  201,   38,   39,
      201,  201,  201,  201,  201,  201,   54,  201,  201,   80,

       84,   86,  201,  201,  201,   94,   99,  201,  201,  106,
      108,  201,  113,  201,  116,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,   35,   37,   41,  201,
      201,   65,   67,   69,   71,  201,  201,  201,  201,  201,
      201,  198,  201,  201,  201,  201,   22,  201,  201,  201,
      201,  201,  201,  201,  201,   62,   64,  201,  201,  201,
      201,   74,   78,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      109,  201,   20,  201,   23,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,

      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,   88,   90,   92,
      201,  201,  201,    0,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      115,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,    0,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,

      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,   25,   26,
      201,  201,  201,  201,   66,   68,   70,   72,  201,  201,
      201,  127,  201,    0,  201,  201,  201,  201,  201,  201,
      201,  169,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  188,  192,
      201,  201,  201,   21,  201,  201,  201,  201,  201,  201,
      201,  201,  201,    0,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  187,  201,  201,

      201,   24,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,    0,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  180,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  146,  201,  201,  201,  201,  201,  155,
      201,  157,  201,  159,  201,  201,  201,  122,  201,  201,
      201,  201,  201,  190,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  193,  201,  201,  201,
      201,   29,   30,  201,  201,  201,  201,  201,  201,  201,

      201,  201,  201,  201,  201,  156,  158,  160,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  191,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,   27,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  173,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  185,  186,  201,  201,  201,  201,
      201,   28,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  144,  145,  149,  201,  201,  201,  201,  201,  123,

      201,  201,  152,  153,  142,  143,  201,  201,  201,  201,
      181,  201,  201,  201,  129,  183,  201,  201,  201,  131,
      201,  201,  201,  121,  201,  201,  201,  201,  201,  201,
      140,  141,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  150,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  184,  201,  201,  201,  201,  201,
      125,  126,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  151,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  128,  201,
      201,  130,  201,  201,  201,  201,  201,  201,  201,  201,

      201,  201,  201,  201,  201,  201,  163,  164,  201,  201,
      201,  201,  201,  201,  201,  167,  168,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  161,  201,  201,  170,
      201,  201,  201,  165,  201,  179,  201,  201,  136,  201,
      138,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  147,  148,  189,  201,  162,  201,  201,  201,  201,
      201,  166,  201,  201,  201,  201,  201,  201,  119,  120,
      201,  201,  201,  133,  135,  201,  201,  201,  201,  201,
      201,  201,  137,  139,  201,  195,  196,  201,  201,  201,

      201,  171,  201,  124,  174,  175,  201,  201,  201,  132,
      134,  201,  201,  201,  201,  201,  201,  154,  201,  201,
      201,  182,  201,  118,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  194,  201,  201,  201,  201,
      176,  177,  201,  201,  201,  201,  172,  201,  201,  201,
      201,  178,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    1,    1,    7,    1,    1,    1,
        1,    1,    8,    1,    9,   10,    1,   11,   12,   13,
       14,   14,   14,   14,   14,   15,   15,   16,    1,    1,
        1,    1,    1,    1,   17,   17,   17,   17,   18,   17,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
        1,    1,    1,    1,   20,    1,   21,   22,   23,   24,

       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[47] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    3,    1,
        4,    4,    4,    4,    4,    1,    5,    6,    7,    7,
        5,    5,    5,    5,    6,    5,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7
    } ;

static const flex_int16_t yy_base[1163] =
    {   0,
        0,    0, 1243, 1244, 1244, 1244, 1244, 1236,    0,   36,
     1231,   42,   24, 1224,    0, 1219, 1200, 1202, 1201,   37,
     1201,   41,   35, 1196,   53, 1195, 1211, 1225, 1244,    0,
        0,    0, 1244,   68,   55,   78,    0, 1244,    0,    0,
     1210, 1191, 1193, 1193, 1194, 1190, 1184, 1179, 1188,    0,
     1181, 1180, 1194, 1178, 1177, 1184, 1174, 1176,   47,   82,
       87,   92,    0,    0, 1192, 1180, 1172, 1171, 1188,   53,
     1179, 1178, 1177, 1169, 1180, 1174, 1182, 1159, 1175,    0,
       76, 1154,   94, 1158, 1172, 1156, 1169,   94, 1161, 1160,
     1159, 1150, 1161, 1150,  112, 1163,    0,   97,  109, 1167,

     1157,  133, 1147,    0, 1164, 1151, 1160, 1152, 1143,  100,
      110, 1154, 1146, 1148, 1147, 1146, 1153, 1133, 1149, 1145,
     1149, 1140, 1131, 1133,   92, 1141,   97, 1131,    0,  121,
     1130, 1129, 1130, 1124,  130, 1125, 1121, 1123, 1136,  157,
     1121, 1116, 1112, 1133, 1132, 1117, 1130, 1105, 1114, 1123,
     1126, 1104, 1111, 1097, 1096, 1101, 1120, 1118, 1093, 1099,
     1110, 1115,   93,    0,    0, 1114, 1111, 1099, 1102, 1095,
     1097, 1094, 1102, 1105, 1085, 1100, 1102, 1102, 1101, 1086,
     1099, 1078,    0, 1079, 1087,  161, 1080, 1085,  120,  169,
      140, 1088, 1080,  137,  150, 1090,    0,    0, 1072, 1071,

     1088, 1069,    0,    0,    0, 1068, 1066, 1079, 1078, 1077,
     1073,  131, 1060,    0, 1075, 1072, 1059, 1058, 1070, 1056,
     1054, 1068, 1056, 1055, 1054, 1048, 1047, 1048,    0,    0,
     1044, 1046, 1045, 1062, 1043,    0,    0, 1046, 1040, 1043,
     1048, 1055, 1036, 1032, 1053, 1036, 1051, 1036,    0, 1042,
     1048, 1023, 1032, 1045, 1023, 1029, 1024, 1027, 1027, 1019,
     1033, 1032,  174, 1031, 1030,    0, 1015,    0,    0, 1014,
     1014, 1030, 1025,    0,    0, 1024, 1023, 1009, 1021, 1020,
     1015, 1009, 1010, 1020, 1020, 1019, 1018,  998, 1011, 1010,
      160, 1009,  993,    0,  993,  997,  996, 1001,    0,  990,

        0,  989, 1006,  136,  987,    0,    0,  986,  984,  994,
      981,  992,  994,    0,  989,  988,  979,  990,  989,  984,
      983,    0,  990,  972,  971,    0,  979,  978,  967,  976,
      964,  977,    0,  982,  961,  975,  974,  185,  973,  968,
      967,  958,  969,  964,    0,    0,    0,    0,    0,  967,
      966,  185,  979,    0,  964,  963,    0,    0,    0,    0,
      948,  960,  959,  964,  963,  962,  955,  954,  939,  957,
        0,  951,  950,  950,  948,  953,  946,  151,  951,  938,
      937,  933,  935,  932,  940,    0,  938,  937,    0,    0,
      936,  932,  931,  922,  162,  933,    0,  928,  927,    0,

        0,    0,  917,  916,  915,    0,    0,  932,  906,    0,
        0,  927,    0,  911,    0,  914,  915,  908,  910,  919,
      918,  917,  906,  905,  899,  898,    0,    0,    0,  911,
      910,  915,  914,  913,  912,  905,  904,  904,  903,  902,
      204,    0,  886,  900,  900,  898,    0,  884,  889,  887,
      886,  886,  896,  896,  895,    0,    0,  876,  875,  874,
      873,    0,    0,  881,  880,  879,  180,  186,  872,  210,
       43,  874,  191,  871,  875,  219,  861,  220,  204,  881,
        0,  872,    0,  867,    0,  874,  873,  872,  876,  855,
      869,  868,  867,  866,  865,  864,  862,  861,  860,  853,

      849,  845,  227,  848,  846,  217,  857,  136,  854,  857,
      842,  841,  840,  211,  840,  829,  839,  837,  849,  835,
      833,  834,  833,  833,  838,  838,  829,  827,  826,  834,
      838,  825,  824,  826,  825,  824,  823,    0,    0,    0,
      232,  817,  829,  816,  227,  828,  815,  810,  811,  806,
      817,  224,  809,  818,  819,  800,  816,  799,  816,  810,
      803,  804,  810,  802,  798,  802,  788,  807,  793,  784,
        0,  790,  798,  782,  781,  788,  794,  793,  792,  790,
      789,  788,  787,  237,  783,  784,  765,  774,  783,  772,
      770,  785,  783,  763,  777,  767,  222,  762,  774,  758,

      757,  756,  774,  769,  754,  754,  771,  757,  764,  755,
      746,  761,  746,  748,  758,  757,  741,  746,    0,    0,
      754,  746,  744,  743,    0,    0,    0,    0,  746,  737,
      747,    0,  752,  732,  749,  730,  747,  744,  728,  745,
      743,  743,  733,  727,  731,  725,  726,  737,  736,  723,
      733,  728,  713,  712,  709,  711,  707,  719,    0,    0,
      683,  674,   96,    0,  148,  172,  197,  240,  241,  241,
      227,  243,  244,  231,  233,  234,  252,  244,  248,  254,
      239,  248,  249,  261,  263,  247,  244,  266,  257,  272,
      254,  254,  271,  272,  265,  279,  267,    0,  276,  264,

      267,    0,  279,  272,  272,  273,  282,  279,  289,  286,
      280,  279,  302,  275,  296,  286,  297,  280,  283,  296,
      297,  298,  295,  290,  286,  287,  287,  309,  310,  296,
      298,  298,  311,  306,  318,  319,  300,  321,  320,  323,
      320,  316,  309,  314,  325,  311,  312,  328,  319,  323,
      318,  322,  318, 1244,  340,  332,  333,  322,  329,    0,
      328,    0,  329,    0,  330,  334,  335,    0,  341,  332,
      351,  345,  342,    0,  342,  357,  345,  358,  343,  363,
      365,  350,  355,  354,  364,  371,    0,  370,  370,  356,
      364,    0,    0,  361,  372,  382,  378,  383,  385,  377,

      373,  383,  375,  371,  377,    0,    0,    0,  385,  378,
      372,  390,  383,  387,  386,  396,  388,  398,    0,  389,
      387,  399,  399,  403,  389,  392,  399,  398,  398,  399,
      395,  396,  399,  406,  405,  420,  418,    0,  402,  418,
      410,  416,  412,  407,  415,  415,  425,  411,  412,  426,
      429,  436,  437,  416,  419,  435,    0,  426,  427,  423,
      424,  425,  426,  425,  444,  449,  449,  431,  437,  446,
      439,  435,  444,  456,    0,    0,  451,  444,  440,  460,
      457,    0,  449,  444,  451,  461,  447,  468,  468,  450,
      451,    0,    0,  472,  473,  456,  473,  471,  460,  480,

      469,  482,    0,    0,    0,    0,  479,  476,  484,  473,
        0,  488,  489,  490,    0,    0,  474,  495,  495,    0,
      485,  494,  479,    0,  480,  481,  502,  491,  481,  492,
        0,    0,  504,  490,  504,  495,  499,  498,  508,  496,
      506,  498,    0,  498,  501,  506,  506,  510,  509,  519,
      511,  524,  521,  508,    0,  523,  511,  521,  529,  535,
        0,    0,  531,  536,  529,  530,  539,  526,  537,  531,
      529,  531,  527,  528,  537,  547,  531,    0,  540,  552,
      539,  540,  536,  537,  553,  544,  548,  547,    0,  550,
      549,    0,  564,  565,  557,  543,  544,  555,  557,  558,

      556,  572,  565,  575,  565,  577,    0,    0,  578,  560,
      563,  581,  571,  572,  584,    0,    0,  574,  572,  573,
      569,  575,  571,  588,  584,  580,  590,  593,  588,  589,
      578,  579,  600,  598,  598,  604,    0,  586,  591,  608,
      600,  594,  602,    0,  592,    0,  601,  613,    0,  614,
        0,  607,  603,  613,  599,  600,  616,  609,  610,  611,
      612,    0,    0,    0,  608,    0,  627,  614,  626,  630,
      611,    0,  627,  613,  614,  629,  616,  617,    0,    0,
      622,  618,  619,    0,    0,  623,  631,  628,  624,  634,
      621,  646,    0,    0,  642,    0,    0,  629,  637,  638,

      651,    0,  639,    0,    0,  654,  641,  651,  657,    0,
        0,  633,  644,  657,  642,  644,  672,    0,  642,  653,
      651,    0,  662,    0,  663,  655,  648,  658,  655,  655,
      675,  656,  665,  673,  658,    0,  679,  677,  666,  667,
        0,  684,  685,  683,  676,  676,    0,  674,  671,  686,
      688,    0, 1244,  712,  719,  723,  726,  731,  732,  735,
      739,  743
    } ;

static const flex_int16_t yy_def[1163] =
    {   0,
     1153,    1, 1153, 1153, 1153, 1153, 1153, 1154, 1155, 1153,
     1153, 1153,   12, 1153, 1156, 1157, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1154, 1153, 1155,
       12,   13, 1153, 1153, 1158, 1153, 1159, 1153, 1156, 1160,
     1157, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1161, 1153,
     1153, 1153, 1159, 1160, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1162, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1153, 1153, 1156,

     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,

     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,

     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,

     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,

     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1153, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1153, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,

     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1153, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1153, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,

     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1153, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1153, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,

     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,

     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,

     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,

     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156,    0, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153
    } ;

static const flex_int16_t yy_nxt[1291] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,    4,   10,   11,
       12,   13,   13,   13,   13,   14,   15,   15,   15,   16,
       17,   18,   19,   15,   15,   20,   15,   15,   21,   15,
       15,   15,   22,   15,   23,   24,   15,   15,   25,   26,
       15,   27,   15,   15,   15,   15,   31,   32,   32,   32,
       32,   34,   32,   32,   32,   32,   32,   45, 1153,   35,
       50,   48,   60,   60,   81,   87,   35, 1153,   46,   49,
       51,   81,   88,   54,  509,   52,   36,   55,   59,   59,
       59,   59,   59,   98,   98,   37,  510,   56,   62,   62,
       62,   62,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   62,   62,   62,   62,  101,   99,   99,   99,
       99,   99,  218,  102,  107,  701,  164,  108,  109,   99,
       99,   99,   99,   99,  145,  110,  111,  112,  146,  113,
      148,  165,  219,  114,  121,  122,  123,  167,  149,  147,
      124,  168,  170,  125,  150,  126,  171,  353,  354,  172,
      127,  271,  128,  132,  179,  133,  245,  134,  180,  173,
      252,  551,  174,  246,  135,  256,  136,  137,  253,  181,
      258,  416,  272,  257,  552,  417,  138,  186,  259,  187,
      188,  189,  239,  240,  342,  418,  433,  702,  190,  191,
      192,  343,  193,  247,  419,  194,  195,  248,  317,  241,

      242,  434,  249,  250,  703,  318,  382,  319,  251,  394,
      383,  500,  501,  384,  504,  512,  395,  502,  396,  503,
      505,  704,  513,  385,  467,  468,  469,  470,  471,  472,
      473,  544,  474,  558,  507,  475,  476,  477,  508,  516,
      520,  478,  479,  517,  522,  480,  545,  518,  523,  548,
      559,  584,  560,  597,  521,  585,  643,  549,  589,  590,
      629,  630,  644,  598,  705,  706,  707,  709,  710,  711,
      713,  714,  712,  715,  716,  717,  718,  723,  719,  708,
      720,  724,  725,  726,  727,  721,  728,  722,  729,  730,
      732,  733,  734,  735,  731,  736,  737,  738,  739,  740,

      741,  742,  743,  744,  745,  746,  747,  748,  749,  750,
      751,  752,  753,  754,  755,  756,  757,  758,  759,  760,
      761,  763,  765,  766,  767,  768,  769,  770,  771,  772,
      773,  774,  775,  776,  777,  762,  764,  778,  779,  780,
      781,  782,  786,  787,  788,  783,  789,  790,  784,  791,
      792,  793,  794,  795,  796,  797,  798,  799,  785,  800,
      801,  803,  804,  805,  806,  807,  808,  809,  810,  811,
      802,  812,  813,  817,  819,  820,  814,  821,  822,  815,
      823,  824,  825,  818,  829,  826,  830,  831,  832,  816,
      827,  833,  836,  828,  837,  838,  834,  839,  840,  835,

      841,  842,  843,  844,  845,  846,  848,  849,  850,  851,
      852,  853,  854,  856,  857,  847,  855,  858,  859,  860,
      861,  862,  863,  864,  865,  866,  867,  868,  869,  870,
      871,  872,  873,  874,  875,  876,  877,  878,  879,  880,
      881,  882,  883,  884,  885,  887,  888,  889,  890,  891,
      892,  893,  894,  895,  886,  896,  897,  898,  899,  900,
      901,  902,  903,  904,  905,  906,  907,  908,  909,  910,
      911,  912,  913,  914,  915,  916,  917,  918,  919,  920,
      921,  922,  923,  924,  925,  926,  927,  928,  929,  931,
      932,  933,  934,  935,  936,  940,  930,  941,  937,  942,

      943,  938,  944,  945,  946,  947,  951,  952,  953,  948,
      954,  939,  949,  955,  956,  957,  958,  959,  960,  961,
      962,  963,  950,  964,  965,  966,  967,  969,  970,  971,
      972,  973,  974,  975,  976,  968,  977,  978,  979,  980,
      981,  982,  983,  984,  985,  986,  987,  989,  990,  988,
      992,  991,  993,  994,  995,  996,  997,  999, 1000, 1001,
     1002, 1003, 1004, 1005,  998, 1006, 1007, 1008, 1009, 1010,
     1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
     1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031,
     1032, 1033, 1034, 1035, 1036, 1027, 1037, 1038, 1039, 1040,

     1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
     1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
     1062, 1063, 1054, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
     1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
     1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
     1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
     1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
     1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
     1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1121, 1130,
     1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,

     1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
     1151, 1152,   28,  700,   28,   28,   28,   28,   28,   30,
      699,   30,   30,   30,   30,   30,   39,   39,   39,   39,
       40,   40,   40,   61,   61,   63,   63,   63,   64,   64,
       64,   64,   59,  698,   59,   99,   99,  697,  696,  695,
      694,  693,  692,  691,  690,  689,  688,  687,  686,  685,
      684,  683,  682,  681,  680,  679,  678,  677,  676,  675,
      674,  673,  672,  671,  670,  669,  668,  667,  666,  665,
      664,  663,  662,  661,  660,  659,  658,  657,  656,  655,
      654,  653,  652,  651,  650,  649,  648,  647,  646,  645,

      642,  641,  640,  639,  638,  637,  636,  635,  634,  633,
      632,  631,  628,  627,  626,  625,  624,  623,  622,  621,
      620,  619,  618,  617,  616,  615,  614,  613,  612,  611,
      610,  609,  608,  607,  606,  605,  604,  603,  602,  601,
      600,  599,  596,  595,  594,  593,  592,  591,  588,  587,
      586,  583,  582,  581,  580,  579,  578,  577,  576,  575,
      574,  573,  572,  571,  570,  569,  568,  567,  566,  565,
      564,  563,  562,  561,  557,  556,  555,  554,  553,  550,
      547,  546,  543,  542,  541,  540,  539,  538,  537,  536,
      535,  534,  533,  532,  531,  530,  529,  528,  527,  526,

      525,  524,  519,  515,  514,  511,  506,  499,  498,  497,
      496,  495,  494,  493,  492,  491,  490,  489,  488,  487,
      486,  485,  484,  483,  482,  481,  466,  465,  464,  463,
      462,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  451,  450,  449,  448,  447,  446,  445,  444,  443,
      442,  441,  440,  439,  438,  437,  436,  435,  432,  431,
      430,  429,  428,  427,  426,  425,  424,  423,  422,  421,
      420,  415,  414,  413,  412,  411,  410,  409,  408,  407,
      406,  405,  404,  403,  402,  401,  400,  399,  398,  397,
      393,  392,  391,  390,  389,  388,  387,  386,  381,  380,

      379,  378,  377,  376,  375,  374,  373,  372,  371,  370,
      369,  368,  367,  366,  365,  364,  363,  362,  361,  360,
      359,  358,  357,  356,  355,  352,  351,  350,  349,  348,
      347,  346,  345,  344,  341,  340,  339,  338,  337,  336,
      335,  334,  333,  332,  331,  330,  329,  328,  327,  326,
      325,  324,  323,  322,  321,  320,  316,  315,  314,  313,
      312,  311,  310,  309,  308,  307,  306,  305,  304,  303,
      302,  301,  300,  299,  298,  297,  296,  295,  294,  293,
      292,  291,  290,  289,  288,  287,  286,  285,  284,  283,
      282,  281,  280,  279,  278,  277,  276,  275,  274,  273,

      270,  269,  268,  267,  266,  265,  264,  263,  262,  261,
      260,  255,  254,  244,  243,  238,  237,  236,  235,  234,
      233,  232,  231,  230,  229,  228,  227,  226,  225,  224,
      223,  222,  221,  220,  217,  216,  215,  214,  213,  212,
      211,  210,  209,  208,  207,  206,  205,  204,  203,  202,
      201,  200,  199,  198,  197,  196,  185,  184,  183,  182,
      178,  177,  176,  175,  169,  166,  163,  162,  161,  160,
      159,  158,  157,  156,  155,  154,  153,  152,  151,  144,
      143,  142,  141,  140,  139,  131,  130,  129,  120,  119,
      118,  117,  116,  115,  106,  105,  104,  103,  100,   97,

       96,   95,   94,   93,   92,   91,   90,   89,   86,   85,
       84,   83,   82,   80,   79,   78,   77,   76,   75,   74,
       73,   72,   71,   70,   69,   68,   67,   66,   65,   41,
       29,   58,   57,   53,   47,   44,   43,   42,   41,   38,
       33,   29, 1153,    3, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153
    } ;

static const flex_int16_t yy_chk[1291] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   10,   10,   10,   10,
       10,   12,   12,   12,   12,   12,   12,   20,   13,   12,
       23,   22,   35,   35,   59,   70,   12,   13,   20,   22,
       23,   59,   70,   25,  471,   23,   12,   25,   34,   34,
       34,   34,   34,   81,   81,   12,  471,   25,   36,   36,
       36,   36,   60,   60,   60,   60,   60,   61,   61,   61,

       61,   61,   62,   62,   62,   62,   83,   98,   98,   98,
       98,   98,  163,   83,   88,  663,  125,   88,   88,   99,
       99,   99,   99,   99,  110,   88,   88,   88,  110,   88,
      111,  125,  163,   88,   95,   95,   95,  127,  111,  110,
       95,  127,  130,   95,  111,   95,  130,  304,  304,  130,
       95,  212,   95,  102,  135,  102,  189,  102,  135,  130,
      191,  508,  130,  189,  102,  194,  102,  102,  191,  135,
      195,  378,  212,  194,  508,  378,  102,  140,  195,  140,
      140,  140,  186,  186,  291,  378,  395,  665,  140,  140,
      140,  291,  140,  190,  378,  140,  140,  190,  263,  186,

      186,  395,  190,  190,  666,  263,  338,  263,  190,  352,
      338,  467,  467,  338,  468,  473,  352,  467,  352,  467,
      468,  667,  473,  338,  441,  441,  441,  441,  441,  441,
      441,  503,  441,  514,  470,  441,  441,  441,  470,  476,
      478,  441,  441,  476,  479,  441,  503,  476,  479,  506,
      514,  541,  514,  552,  478,  541,  597,  506,  545,  545,
      584,  584,  597,  552,  668,  669,  670,  671,  672,  673,
      674,  675,  673,  676,  677,  678,  679,  681,  680,  670,
      680,  682,  683,  684,  685,  680,  686,  680,  687,  688,
      689,  690,  691,  692,  688,  693,  694,  695,  696,  697,

      699,  700,  701,  703,  704,  705,  706,  707,  708,  709,
      710,  711,  712,  713,  714,  715,  716,  717,  718,  719,
      720,  721,  722,  723,  724,  725,  726,  727,  728,  729,
      730,  731,  732,  733,  734,  720,  721,  735,  736,  737,
      738,  739,  740,  741,  742,  739,  743,  744,  739,  745,
      746,  747,  748,  749,  750,  751,  752,  753,  739,  755,
      756,  757,  758,  759,  761,  763,  765,  766,  767,  769,
      756,  770,  771,  772,  773,  775,  771,  776,  777,  771,
      778,  779,  780,  772,  782,  781,  783,  784,  785,  771,
      781,  786,  788,  781,  789,  790,  786,  791,  794,  786,

      795,  796,  797,  798,  799,  800,  801,  802,  803,  804,
      805,  809,  810,  811,  812,  800,  810,  813,  814,  815,
      816,  817,  818,  820,  821,  822,  823,  824,  825,  826,
      827,  828,  829,  830,  831,  832,  833,  834,  835,  836,
      837,  839,  840,  841,  842,  843,  844,  845,  846,  847,
      848,  849,  850,  851,  842,  852,  853,  854,  855,  856,
      858,  859,  860,  861,  862,  863,  864,  865,  866,  867,
      868,  869,  870,  871,  872,  873,  874,  877,  878,  879,
      880,  881,  883,  884,  885,  886,  887,  888,  889,  890,
      891,  894,  895,  896,  897,  898,  889,  899,  897,  900,

      901,  897,  902,  907,  908,  909,  910,  912,  913,  909,
      914,  897,  909,  917,  918,  919,  921,  922,  923,  925,
      926,  927,  909,  928,  929,  930,  933,  934,  935,  936,
      937,  938,  939,  940,  941,  933,  942,  944,  945,  946,
      947,  948,  949,  950,  951,  952,  953,  954,  956,  953,
      957,  956,  958,  959,  960,  963,  964,  965,  966,  967,
      968,  969,  970,  971,  964,  972,  973,  974,  975,  976,
      977,  979,  980,  981,  982,  983,  984,  985,  986,  987,
      988,  990,  991,  993,  994,  995,  996,  997,  998,  999,
     1000, 1001, 1002, 1003, 1004,  995, 1005, 1006, 1009, 1010,

     1011, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1022,
     1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
     1033, 1034, 1025, 1035, 1036, 1038, 1039, 1040, 1041, 1042,
     1043, 1045, 1047, 1048, 1050, 1052, 1053, 1054, 1055, 1056,
     1057, 1058, 1059, 1060, 1061, 1065, 1067, 1068, 1069, 1070,
     1071, 1073, 1074, 1075, 1076, 1077, 1078, 1081, 1082, 1083,
     1086, 1087, 1088, 1089, 1090, 1091, 1092, 1095, 1098, 1099,
     1100, 1101, 1103, 1106, 1107, 1108, 1109, 1112, 1113, 1114,
     1115, 1116, 1117, 1119, 1120, 1121, 1123, 1125, 1114, 1126,
     1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1137,

     1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1148, 1149,
     1150, 1151, 1154,  662, 1154, 1154, 1154, 1154, 1154, 1155,
      661, 1155, 1155, 1155, 1155, 1155, 1156, 1156, 1156, 1156,
     1157, 1157, 1157, 1158, 1158, 1159, 1159, 1159, 1160, 1160,
     1160, 1160, 1161,  658, 1161, 1162, 1162,  657,  656,  655,
      654,  653,  652,  651,  650,  649,  648,  647,  646,  645,
      644,  643,  642,  641,  640,  639,  638,  637,  636,  635,
      634,  633,  631,  630,  629,  624,  623,  622,  621,  618,
      617,  616,  615,  614,  613,  612,  611,  610,  609,  608,
      607,  606,  605,  604,  603,  602,  601,  600,  599,  598,

      596,  595,  594,  593,  592,  591,  590,  589,  588,  587,
      586,  585,  583,  582,  581,  580,  579,  578,  577,  576,
      575,  574,  573,  572,  570,  569,  568,  567,  566,  565,
      564,  563,  562,  561,  560,  559,  558,  557,  556,  555,
      554,  553,  551,  550,  549,  548,  547,  546,  544,  543,
      542,  537,  536,  535,  534,  533,  532,  531,  530,  529,
      528,  527,  526,  525,  524,  523,  522,  521,  520,  519,
      518,  517,  516,  515,  513,  512,  511,  510,  509,  507,
      505,  504,  502,  501,  500,  499,  498,  497,  496,  495,
      494,  493,  492,  491,  490,  489,  488,  487,  486,  484,

      482,  480,  477,  475,  474,  472,  469,  466,  465,  464,
      461,  460,  459,  458,  455,  454,  453,  452,  451,  450,
      449,  448,  446,  445,  444,  443,  440,  439,  438,  437,
      436,  435,  434,  433,  432,  431,  430,  426,  425,  424,
      423,  422,  421,  420,  419,  418,  417,  416,  414,  412,
      409,  408,  405,  404,  403,  399,  398,  396,  394,  393,
      392,  391,  388,  387,  385,  384,  383,  382,  381,  380,
      379,  377,  376,  375,  374,  373,  372,  370,  369,  368,
      367,  366,  365,  364,  363,  362,  361,  356,  355,  353,
      351,  350,  344,  343,  342,  341,  340,  339,  337,  336,

      335,  334,  332,  331,  330,  329,  328,  327,  325,  324,
      323,  321,  320,  319,  318,  317,  316,  315,  313,  312,
      311,  310,  309,  308,  305,  303,  302,  300,  298,  297,
      296,  295,  293,  292,  290,  289,  288,  287,  286,  285,
      284,  283,  282,  281,  280,  279,  278,  277,  276,  273,
      272,  271,  270,  267,  265,  264,  262,  261,  260,  259,
      258,  257,  256,  255,  254,  253,  252,  251,  250,  248,
      247,  246,  245,  244,  243,  242,  241,  240,  239,  238,
      235,  234,  233,  232,  231,  228,  227,  226,  225,  224,
      223,  222,  221,  220,  219,  218,  217,  216,  215,  213,

      211,  210,  209,  208,  207,  206,  202,  201,  200,  199,
      196,  193,  192,  188,  187,  185,  184,  182,  181,  180,
      179,  178,  177,  176,  175,  174,  173,  172,  171,  170,
      169,  168,  167,  166,  162,  161,  160,  159,  158,  157,
      156,  155,  154,  153,  152,  151,  150,  149,  148,  147,
      146,  145,  144,  143,  142,  141,  139,  138,  137,  136,
      134,  133,  132,  131,  128,  126,  124,  123,  122,  121,
      120,  119,  118,  117,  116,  115,  114,  113,  112,  109,
      108,  107,  106,  105,  103,  101,  100,   96,   94,   93,
       92,   91,   90,   89,   87,   86,   85,   84,   82,   79,

       78,   77,   76,   75,   74,   73,   72,   71,   69,   68,
       67,   66,   65,   58,   57,   56,   55,   54,   53,   52,
       51,   49,   48,   47,   46,   45,   44,   43,   42,   41,
       28,   27,   26,   24,   21,   19,   18,   17,   16,   14,
       11,    8,    3, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[208] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parser/flatzincflexlexer.ll"
/* -*- C++ -*-
 *
 * $MATHSAT5_LICENSE_BANNER_HERE$
 *
 * Author: Patrick Trentin <patrick.trentin@unitn.it>
 *
 * This file is part of OptiMathSAT.
 */

#line 20 "parser/flatzincflexlexer.ll"
//.                  { ParserInterface::error err("unrecognized text: "); err << yytext; throw err; }
#include "../parser/parserinterface.h"
#include "../utils/strutils.h"

using namespace msat;

#include "../parser/flatzincbisonparser.h"

#define MSAT_GET_INFO(s) static_cast<ParserInterface::istream_info *>(msat_flatzinc_parser_get_extra(s))

#define YY_INPUT(buf,result,maxsize)                                    \
    {                                                                   \
         ParserInterface::istream_info *source = MSAT_GET_INFO(yyscanner); \
         result = ParserInterface::flex_get_input(source->stream, buf, maxsize); \
    }

#define MSAT_SDUP(result,s,n)  \
    do { \
        ParserInterface::istream_info *source = MSAT_GET_INFO(yyscanner); \
        result = source->alloc->str_dup(s, n);                            \
    } while (0)

#define yyterminate() \
    do { \
        ParserInterface::istream_info *source = MSAT_GET_INFO(yyscanner); \
        source->done = true; \
        return YY_NULL; \
    } while (0)

#line 1399 "parser/flatzincflexlexer.cc"
/* Regular expressions for attributed tokens. */
#line 1401 "parser/flatzincflexlexer.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 66 "parser/flatzincflexlexer.ll"

#line 1693 "parser/flatzincflexlexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1154 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1244 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 67 "parser/flatzincflexlexer.ll"
{ ; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 68 "parser/flatzincflexlexer.ll"
{ ; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 69 "parser/flatzincflexlexer.ll"
{ ; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 70 "parser/flatzincflexlexer.ll"
{ ; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 72 "parser/flatzincflexlexer.ll"
{ return TK_PREDICATE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 73 "parser/flatzincflexlexer.ll"
{ return TK_VAR; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 74 "parser/flatzincflexlexer.ll"
{ return TK_BOOL; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 75 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 76 "parser/flatzincflexlexer.ll"
{ return TK_INT; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 77 "parser/flatzincflexlexer.ll"
{ return TK_ARRAY; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 78 "parser/flatzincflexlexer.ll"
{ return TK_SET; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 79 "parser/flatzincflexlexer.ll"
{ return TK_OF; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 80 "parser/flatzincflexlexer.ll"
{ return TK_TRUE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 81 "parser/flatzincflexlexer.ll"
{ return TK_FALSE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 82 "parser/flatzincflexlexer.ll"
{ return TK_CONSTRAINT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 83 "parser/flatzincflexlexer.ll"
{ return TK_SOLVE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 84 "parser/flatzincflexlexer.ll"
{ return TK_MINIMIZE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 85 "parser/flatzincflexlexer.ll"
{ return TK_MAXIMIZE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 86 "parser/flatzincflexlexer.ll"
{ return TK_SATISFY; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 88 "parser/flatzincflexlexer.ll"
{ return TK_ARRAY_BOOL_AND; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 89 "parser/flatzincflexlexer.ll"
{ return TK_ARRAY_BOOL_ELEMENT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 90 "parser/flatzincflexlexer.ll"
{ return TK_ARRAY_BOOL_OR; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 91 "parser/flatzincflexlexer.ll"
{ return TK_ARRAY_BOOL_XOR; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 92 "parser/flatzincflexlexer.ll"
{ return TK_ARRAY_FLOAT_ELEMENT; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 93 "parser/flatzincflexlexer.ll"
{ return TK_ARRAY_INT_ELEMENT; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 94 "parser/flatzincflexlexer.ll"
{ return TK_ARRAY_SET_ELEMENT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 95 "parser/flatzincflexlexer.ll"
{ return TK_ARRAY_VAR_BOOL_ELEMENT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 96 "parser/flatzincflexlexer.ll"
{ return TK_ARRAY_VAR_FLOAT_ELEMENT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 97 "parser/flatzincflexlexer.ll"
{ return TK_ARRAY_VAR_INT_ELEMENT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 98 "parser/flatzincflexlexer.ll"
{ return TK_ARRAY_VAR_SET_ELEMENT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 99 "parser/flatzincflexlexer.ll"
{ return TK_BOOL2INT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 100 "parser/flatzincflexlexer.ll"
{ return TK_BOOL_AND; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 101 "parser/flatzincflexlexer.ll"
{ return TK_BOOL_CLAUSE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 102 "parser/flatzincflexlexer.ll"
{ return TK_BOOL_EQ; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 103 "parser/flatzincflexlexer.ll"
{ return TK_BOOL_EQ_REIF; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 104 "parser/flatzincflexlexer.ll"
{ return TK_BOOL_LE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 105 "parser/flatzincflexlexer.ll"
{ return TK_BOOL_LE_REIF; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 106 "parser/flatzincflexlexer.ll"
{ return TK_BOOL_LIN_EQ; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 107 "parser/flatzincflexlexer.ll"
{ return TK_BOOL_LIN_LE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 108 "parser/flatzincflexlexer.ll"
{ return TK_BOOL_LT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 109 "parser/flatzincflexlexer.ll"
{ return TK_BOOL_LT_REIF; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 110 "parser/flatzincflexlexer.ll"
{ return TK_BOOL_NOT; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 111 "parser/flatzincflexlexer.ll"
{ return TK_BOOL_OR; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 112 "parser/flatzincflexlexer.ll"
{ return TK_BOOL_XOR; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 113 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_ABS; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 114 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_DIV; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 115 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_ACOS; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 116 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_ASIN; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 117 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_ATAN; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 118 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_COS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 119 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_COSH; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 120 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_EXP; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 121 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_LN; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 122 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_LOG10; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 123 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_LOG2; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 124 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_SQRT; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 125 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_SIN; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 126 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_SINH; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 127 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_TAN; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 128 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_TANH; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 129 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_EQ; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 130 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_EQ_REIF; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 131 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_LE; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 132 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_LE_REIF; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 133 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_LIN_EQ; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 134 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_LIN_EQ_REIF; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 135 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_LIN_LE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 136 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_LIN_LE_REIF; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 137 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_LIN_LT; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 138 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_LIN_LT_REIF; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 139 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_LIN_NE; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 140 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_LIN_NE_REIF; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 141 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_LT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 142 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_LT_REIF; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 143 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_MAX; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 144 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_MIN; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 145 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_NE; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 146 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_NE_REIF; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 147 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_PLUS; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 148 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_TIMES; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 149 "parser/flatzincflexlexer.ll"
{ return TK_INT_ABS; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 150 "parser/flatzincflexlexer.ll"
{ return TK_INT_DIV; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 151 "parser/flatzincflexlexer.ll"
{ return TK_INT_EQ; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 152 "parser/flatzincflexlexer.ll"
{ return TK_INT_EQ_REIF; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 153 "parser/flatzincflexlexer.ll"
{ return TK_INT_LE; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 154 "parser/flatzincflexlexer.ll"
{ return TK_INT_LE_REIF; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 155 "parser/flatzincflexlexer.ll"
{ return TK_INT_LIN_EQ; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 156 "parser/flatzincflexlexer.ll"
{ return TK_INT_LIN_EQ_REIF; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 157 "parser/flatzincflexlexer.ll"
{ return TK_INT_LIN_LE; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 158 "parser/flatzincflexlexer.ll"
{ return TK_INT_LIN_LE_REIF; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 159 "parser/flatzincflexlexer.ll"
{ return TK_INT_LIN_NE; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 160 "parser/flatzincflexlexer.ll"
{ return TK_INT_LIN_NE_REIF; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 161 "parser/flatzincflexlexer.ll"
{ return TK_INT_LT; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 162 "parser/flatzincflexlexer.ll"
{ return TK_INT_LT_REIF; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 163 "parser/flatzincflexlexer.ll"
{ return TK_INT_MAX; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 164 "parser/flatzincflexlexer.ll"
{ return TK_INT_MIN; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 165 "parser/flatzincflexlexer.ll"
{ return TK_INT_MOD; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 166 "parser/flatzincflexlexer.ll"
{ return TK_INT_NE; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 167 "parser/flatzincflexlexer.ll"
{ return TK_INT_NE_REIF; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 168 "parser/flatzincflexlexer.ll"
{ return TK_INT_PLUS; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 169 "parser/flatzincflexlexer.ll"
{ return TK_INT_TIMES; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 170 "parser/flatzincflexlexer.ll"
{ return TK_INT2FLOAT; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 171 "parser/flatzincflexlexer.ll"
{ return TK_SET_CARD; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 172 "parser/flatzincflexlexer.ll"
{ return TK_SET_DIFF; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 173 "parser/flatzincflexlexer.ll"
{ return TK_SET_EQ; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 174 "parser/flatzincflexlexer.ll"
{ return TK_SET_EQ_REIF; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 175 "parser/flatzincflexlexer.ll"
{ return TK_SET_IN; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 176 "parser/flatzincflexlexer.ll"
{ return TK_SET_IN_REIF; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 177 "parser/flatzincflexlexer.ll"
{ return TK_SET_INTERSECT; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 178 "parser/flatzincflexlexer.ll"
{ return TK_SET_LE; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 179 "parser/flatzincflexlexer.ll"
{ return TK_SET_LT; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 180 "parser/flatzincflexlexer.ll"
{ return TK_SET_NE; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 181 "parser/flatzincflexlexer.ll"
{ return TK_SET_NE_REIF; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 182 "parser/flatzincflexlexer.ll"
{ return TK_SET_SUBSET; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 183 "parser/flatzincflexlexer.ll"
{ return TK_SET_SUBSET_REIF; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 184 "parser/flatzincflexlexer.ll"
{ return TK_SET_SYMDIFF; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 185 "parser/flatzincflexlexer.ll"
{ return TK_SET_UNION; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 187 "parser/flatzincflexlexer.ll"
{ return TK_ALLDIFFERENT_EXCEPT_0; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 188 "parser/flatzincflexlexer.ll"
{ return TK_ALL_DIFFERENT_INT; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 189 "parser/flatzincflexlexer.ll"
{ return TK_ALL_DIFFERENT_SET; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 190 "parser/flatzincflexlexer.ll"
{ return TK_ALL_DISJOINT; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 191 "parser/flatzincflexlexer.ll"
{ return TK_DISJOINT; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 192 "parser/flatzincflexlexer.ll"
{ return TK_DISJUNCTIVE; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 193 "parser/flatzincflexlexer.ll"
{ return TK_DISJUNCTIVE_STRICT; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 194 "parser/flatzincflexlexer.ll"
{ return TK_ALL_EQUAL_INT; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 195 "parser/flatzincflexlexer.ll"
{ return TK_ALL_EQUAL_SET; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 196 "parser/flatzincflexlexer.ll"
{ return TK_AMONG; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 197 "parser/flatzincflexlexer.ll"
{ return TK_MAXIMUM_FLOAT; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 198 "parser/flatzincflexlexer.ll"
{ return TK_MAXIMUM_INT; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 199 "parser/flatzincflexlexer.ll"
{ return TK_MINIMUM_FLOAT; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 200 "parser/flatzincflexlexer.ll"
{ return TK_MINIMUM_INT; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 201 "parser/flatzincflexlexer.ll"
{ return TK_ARRAY_FLOAT_MAXIMUM; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 202 "parser/flatzincflexlexer.ll"
{ return TK_ARRAY_INT_MAXIMUM; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 203 "parser/flatzincflexlexer.ll"
{ return TK_ARRAY_FLOAT_MINIMUM; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 204 "parser/flatzincflexlexer.ll"
{ return TK_ARRAY_INT_MINIMUM; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 205 "parser/flatzincflexlexer.ll"
{ return TK_MAXIMUM_ARG_INT; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 206 "parser/flatzincflexlexer.ll"
{ return TK_MAXIMUM_ARG_FLOAT; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 207 "parser/flatzincflexlexer.ll"
{ return TK_MINIMUM_ARG_INT; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 208 "parser/flatzincflexlexer.ll"
{ return TK_MINIMUM_ARG_FLOAT; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 209 "parser/flatzincflexlexer.ll"
{ return TK_AT_LEAST_INT; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 210 "parser/flatzincflexlexer.ll"
{ return TK_AT_LEAST_SET; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 211 "parser/flatzincflexlexer.ll"
{ return TK_EXACTLY_INT; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 212 "parser/flatzincflexlexer.ll"
{ return TK_EXACTLY_SET; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 213 "parser/flatzincflexlexer.ll"
{ return TK_AT_MOST_INT; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 214 "parser/flatzincflexlexer.ll"
{ return TK_AT_MOST_SET; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 215 "parser/flatzincflexlexer.ll"
{ return TK_ATMOST1; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 216 "parser/flatzincflexlexer.ll"
{ return TK_BIN_PACKING_CAPA; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 217 "parser/flatzincflexlexer.ll"
{ return TK_BIN_PACKING_LOAD; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 218 "parser/flatzincflexlexer.ll"
{ return TK_BIN_PACKING; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 219 "parser/flatzincflexlexer.ll"
{ return TK_ELEMENT_BOOL; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 220 "parser/flatzincflexlexer.ll"
{ return TK_ELEMENT_FLOAT; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 221 "parser/flatzincflexlexer.ll"
{ return TK_ELEMENT_INT; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 222 "parser/flatzincflexlexer.ll"
{ return TK_ELEMENT_SET; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 223 "parser/flatzincflexlexer.ll"
{ return TK_COMPARISON_REL_ARRAY; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 224 "parser/flatzincflexlexer.ll"
{ return TK_COUNT_EQ; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 225 "parser/flatzincflexlexer.ll"
{ return TK_COUNT_GEQ; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 226 "parser/flatzincflexlexer.ll"
{ return TK_COUNT_GT; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 227 "parser/flatzincflexlexer.ll"
{ return TK_COUNT_LEQ; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 228 "parser/flatzincflexlexer.ll"
{ return TK_COUNT_LT; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 229 "parser/flatzincflexlexer.ll"
{ return TK_COUNT_NEQ; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 230 "parser/flatzincflexlexer.ll"
{ return TK_DECREASING_BOOL; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 231 "parser/flatzincflexlexer.ll"
{ return TK_DECREASING_FLOAT; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 232 "parser/flatzincflexlexer.ll"
{ return TK_DECREASING_INT; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 233 "parser/flatzincflexlexer.ll"
{ return TK_DECREASING_SET; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 234 "parser/flatzincflexlexer.ll"
{ return TK_INCREASING_BOOL; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 235 "parser/flatzincflexlexer.ll"
{ return TK_INCREASING_FLOAT; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 236 "parser/flatzincflexlexer.ll"
{ return TK_INCREASING_INT; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 237 "parser/flatzincflexlexer.ll"
{ return TK_INCREASING_SET; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 238 "parser/flatzincflexlexer.ll"
{ return TK_DIFFN; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 239 "parser/flatzincflexlexer.ll"
{ return TK_DIFFN_NONSTRICT; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 240 "parser/flatzincflexlexer.ll"
{ return TK_DIFFN_NONOVERLAP_K; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 241 "parser/flatzincflexlexer.ll"
{ return TK_DIFFN_NONSTRICT_NONOVERLAP_K; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 242 "parser/flatzincflexlexer.ll"
{ return TK_DISTRIBUTE; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 243 "parser/flatzincflexlexer.ll"
{ return TK_GEOST_NONOVERLAP_K; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 244 "parser/flatzincflexlexer.ll"
{ return TK_GLOBAL_CARDINALITY; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 245 "parser/flatzincflexlexer.ll"
{ return TK_GLOBAL_CARDINALITY_CLOSED; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 246 "parser/flatzincflexlexer.ll"
{ return TK_GLOBAL_CARDINALITY_LOW_UP; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 247 "parser/flatzincflexlexer.ll"
{ return TK_GLOBAL_CARDINALITY_LOW_UP_CLOSED; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 248 "parser/flatzincflexlexer.ll"
{ return TK_INT_SET_CHANNEL; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 249 "parser/flatzincflexlexer.ll"
{ return TK_INVERSE; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 250 "parser/flatzincflexlexer.ll"
{ return TK_INVERSE_SET; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 251 "parser/flatzincflexlexer.ll"
{ return TK_LINK_SET_TO_BOOLEANS; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 252 "parser/flatzincflexlexer.ll"
{ return TK_MEMBER_BOOL; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 253 "parser/flatzincflexlexer.ll"
{ return TK_MEMBER_FLOAT; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 254 "parser/flatzincflexlexer.ll"
{ return TK_MEMBER_INT; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 255 "parser/flatzincflexlexer.ll"
{ return TK_MEMBER_SET; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 256 "parser/flatzincflexlexer.ll"
{ return TK_NVALUE; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 257 "parser/flatzincflexlexer.ll"
{ return TK_RANGE; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 258 "parser/flatzincflexlexer.ll"
{ return TK_BOOL_CLAUSE_REIF; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 259 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_IN; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 260 "parser/flatzincflexlexer.ll"
{ return TK_FLOAT_DOM; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 261 "parser/flatzincflexlexer.ll"
{ return TK_ROOTS; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 262 "parser/flatzincflexlexer.ll"
{ return TK_SUM_PRED; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 263 "parser/flatzincflexlexer.ll"
{ return TK_SYMMETRIC_ALL_DIFFERENT; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 264 "parser/flatzincflexlexer.ll"
{ return TK_VALUE_PRECEDE_INT; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 265 "parser/flatzincflexlexer.ll"
{ return TK_VALUE_PRECEDE_SET; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 267 "parser/flatzincflexlexer.ll"
{ return TK_OUTPUT_VAR; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 268 "parser/flatzincflexlexer.ll"
{ return TK_OUTPUT_ARRAY; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 270 "parser/flatzincflexlexer.ll"
{ return TK_DOTDOT; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 271 "parser/flatzincflexlexer.ll"
{ return TK_COLONCOLON; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 273 "parser/flatzincflexlexer.ll"
{ MSAT_SDUP(yylval->string, yytext, yyleng); return IDENT; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 274 "parser/flatzincflexlexer.ll"
{ MSAT_SDUP(yylval->string, yytext, yyleng); return UNDERSCORE_IDENT; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 275 "parser/flatzincflexlexer.ll"
{ MSAT_SDUP(yylval->string, yytext, yyleng); return STRING_LITERAL; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 276 "parser/flatzincflexlexer.ll"
{ MSAT_SDUP(yylval->string, yytext, yyleng); return INT_LITERAL; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 277 "parser/flatzincflexlexer.ll"
{ MSAT_SDUP(yylval->string, yytext, yyleng); return FLOAT_LITERAL; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 279 "parser/flatzincflexlexer.ll"
{ return yytext[0]; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 281 "parser/flatzincflexlexer.ll"
ECHO;
	YY_BREAK
#line 2798 "parser/flatzincflexlexer.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1154 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1154 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1153);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 281 "parser/flatzincflexlexer.ll"


